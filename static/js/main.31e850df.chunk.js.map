{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","components/minter/Cover.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","hooks/useMinterContract.js","hooks/useContract.js","assets/img/swan-origami.png","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","name","coverImg","connect","background","minHeight","maxWidth","src","alt","Button","catch","e","console","log","client","ipfsHttpClient","createNft","minterContract","performActions","a","description","ipfsImage","ownerAddress","attributes","kit","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","methods","safeMint","send","from","transaction","uploadToIpfs","file","files","progress","prog","getNfts","nfts","totalSupply","call","nftsLength","i","nft","Promise","resolve","tokenURI","res","fetchNftMeta","meta","fetchNftOwner","index","push","Number","all","ipfsUrl","axios","get","ownerOf","fetchNftContractOwner","COLORS","SHAPES","AddNfts","save","useState","setName","setIpfsImage","setDescription","setAttributes","show","setShow","handleClose","setAttributesFunc","trait_type","value","attributeObject","arr","findIndex","el","oldArray","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","imageUrl","alert","Label","hidden","map","color","toLowerCase","shape","Footer","disabled","NftCard","Col","Card","Badge","bg","objectFit","Text","Row","attribute","key","Loader","role","NftList","useContractKit","setNfts","loading","setLoading","nftOwner","setNftOwner","getAssets","useCallback","allNfts","error","addNft","toast","fetchContractOwner","_address","Add","xs","sm","lg","_nft","useMinterContract","abi","contractAddress","getConnectedKit","contract","setContract","getContract","web3","eth","Contract","useContract","MyNFTAbi","MyNFTContractAddress","MyNFT","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.31e850df.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({ address, size, ...rest }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\n      );\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest}>\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\nimport Identicon from \"./ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst Cover = ({ name, coverImg, connect }) => {\n  if (name) {\n    return (\n      <div\n        className=\"d-flex justify-content-center flex-column text-center \"\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\n      >\n        <div className=\"mt-auto text-light mb-5\">\n          <div\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\n            style={{ maxWidth: \"320px\" }}\n          >\n            <img src={coverImg} alt=\"\" />\n          </div>\n          <h1>{name}</h1>\n          <p>Please connect your wallet to continue.</p>\n          <Button\n            onClick={() => connect().catch((e) => console.log(e))}\n            variant=\"outline-light\"\n            className=\"rounded-pill px-3 mt-3\"\n          >\n            Connect Wallet\n          </Button>\n        </div>\n\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport axios from \"axios\";\n\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\nexport const createNft = async (\n  minterContract,\n  performActions,\n  { name, description, ipfsImage, ownerAddress, attributes }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage) return;\n    const { defaultAccount } = kit;\n\n    // convert NFT metadata to JSON format\n    const data = JSON.stringify({\n      name,\n      description,\n      image: ipfsImage,\n      owner: defaultAccount,\n      attributes,\n    });\n\n    try {\n      // save NFT metadata to IPFS\n      const added = await client.add(data);\n\n      // IPFS url for uploaded metadata\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n\n      // mint the NFT and save the IPFS url to the blockchain\n      let transaction = await minterContract.methods\n        .safeMint(ownerAddress, url)\n        .send({ from: defaultAccount });\n\n      return transaction;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  });\n};\n\nexport const uploadToIpfs = async (e) => {\n  const file = e.target.files[0];\n  if (!file) return;\n  try {\n    const added = await client.add(file, {\n      progress: (prog) => console.log(`received: ${prog}`),\n    });\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\n  } catch (error) {\n    console.log(\"Error uploading file: \", error);\n  }\n};\n\nexport const getNfts = async (minterContract) => {\n  try {\n    const nfts = [];\n    const nftsLength = await minterContract.methods.totalSupply().call();\n    for (let i = 0; i < Number(nftsLength); i++) {\n      const nft = new Promise(async (resolve) => {\n        const res = await minterContract.methods.tokenURI(i).call();\n        const meta = await fetchNftMeta(res);\n        const owner = await fetchNftOwner(minterContract, i);\n        resolve({\n          index: i,\n          owner,\n          name: meta.data.name,\n          image: meta.data.image,\n          description: meta.data.description,\n          attributes: meta.data.attributes,\n        });\n      });\n      nfts.push(nft);\n    }\n    return Promise.all(nfts);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const meta = await axios.get(ipfsUrl);\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fetchNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fetchNftContractOwner = async (minterContract) => {\n  try {\n    let owner = await minterContract.methods.owner().call();\n    return owner;\n  } catch (e) {\n    console.log({ e });\n  }\n};","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\nconst COLORS = [\"Red\", \"Green\", \"Blue\", \"Cyan\", \"Yellow\", \"Purple\"];\nconst SHAPES = [\"Circle\", \"Square\", \"Triangle\"];\n\nconst AddNfts = ({ save, address }) => {\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [attributes, setAttributes] = useState([]);\n  const [show, setShow] = useState(false);\n\n  // check if all form data has been filled\n  const isFormFilled = () =>\n    name && ipfsImage && description && attributes.length > 2;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  // add an attribute to an NFT\n  const setAttributesFunc = (e, trait_type) => {\n    const { value } = e.target;\n    const attributeObject = {\n      trait_type,\n      value,\n    };\n    const arr = attributes;\n\n    // check if attribute already exists\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n    if (index >= 0) {\n      // update the existing attribute\n      arr[index] = {\n        trait_type,\n        value,\n      };\n      setAttributes(arr);\n      return;\n    }\n\n    // add a new attribute\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\n  };\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create NFT</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of NFT\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadToIpfs(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Product name\"\n            ></Form.Control>\n            <Form.Label>\n              <h5>Properties</h5>\n            </Form.Label>\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"background\");\n              }}\n              placeholder=\"Background\"\n            >\n              <option hidden>Background</option>\n              {COLORS.map((color) => (\n                <option\n                  key={`background-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"color\");\n              }}\n              placeholder=\"NFT Color\"\n            >\n              <option hidden>Color</option>\n              {COLORS.map((color) => (\n                <option\n                  key={`color-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"shape\");\n              }}\n              placeholder=\"NFT Shape\"\n            >\n              <option hidden>Shape</option>\n              {SHAPES.map((shape) => (\n                <option\n                  key={`shape-${shape.toLowerCase()}`}\n                  value={shape.toLowerCase()}\n                >\n                  {shape}\n                </option>\n              ))}\n            </Form.Control>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                ipfsImage,\n                description,\n                ownerAddress: address,\n                attributes,\n              });\n              handleClose();\n            }}\n          >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\nimport Identicon from \"../../ui/Identicon\";\n\nconst NftCard = ({ nft }) => {\n  const { image, description, owner, name, index, attributes } = nft;\n\n  return (\n    <Col key={index}>\n      <Card className=\" h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon address={owner} size={28} />\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(owner)}\n            </span>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {index} ID\n            </Badge>\n          </Stack>\n        </Card.Header>\n\n        <div className=\" ratio ratio-4x3\">\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\n        </div>\n\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n          <div>\n            <Row className=\"mt-2\">\n              {attributes.map((attribute, key) => (\n                <Col key={key}>\n                  <div className=\"border rounded bg-light\">\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\n                      {attribute.trait_type}\n                    </div>\n                    <div className=\"text-secondary text-capitalize font-monospace\">\n                      {attribute.value}\n                    </div>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default NftCard;\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getNfts,\n  createNft,\n  fetchNftContractOwner,\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst NftList = ({ minterContract, name }) => {\n  const { performActions, address } = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n      const allNfts = await getNfts(minterContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n      await createNft(minterContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchContractOwner = useCallback(async (minterContract) => {\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n    setNftOwner(_address);\n  }, []);\n\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n        fetchContractOwner(minterContract);\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [minterContract, address, getAssets, fetchContractOwner]);\n\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\n              {nftOwner === address ? (\n                <AddNfts save={addNft} address={address} />\n              ) : null}\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n              {nfts.map((_nft) => (\n                <Nft\n                  key={_nft.index}\n                  nft={{\n                    ..._nft,\n                  }}\n                />\n              ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  minterContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n};\n\nexport default NftList;\n","import { useContract } from \"./useContract\";\nimport MyNFTAbi from \"../contracts/MyNFT.json\";\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\n\nexport const useMinterContract = () =>\n  useContract(MyNFTAbi.abi, MyNFTContractAddress.MyNFT);\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","export default __webpack_public_path__ + \"static/media/swan-origami.6c2f4a51.png\";","import React from \"react\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/Wallet\";\nimport Cover from \"./components/minter/Cover\";\nimport Nfts from \"./components/minter/nfts\";\nimport { useBalance, useMinterContract } from \"./hooks\";\nimport coverImg from \"./assets/img/swan-origami.png\";\nimport \"./App.css\";\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n  const { balance, getBalance } = useBalance();\n  const minterContract = useMinterContract();\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <Nfts\n              name=\"Origami NFTs\"\n              updateBalance={getBalance}\n              minterContract={minterContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        <Cover name=\"Origami NFTs\" coverImg={coverImg} connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Origami NFT Minter\",\n        description: \"A simple NFT minter on Celo\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}